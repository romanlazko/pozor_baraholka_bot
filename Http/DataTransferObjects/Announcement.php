<?php

namespace App\Bots\pozor_baraholka_bot\Http\DataTransferObjects;

use Carbon\Carbon;
use Illuminate\Support\Collection;
use Romanlazko\Telegram\App\Config;

class Announcement
{
    public function __construct(
        public ?int $id = null,
        public ?int $chat = null,
        public ?string $city = null,
        public ?string $type = null,
        public ?string $title = null,
        public ?string $caption = null,
        public ?int $cost = null,
        public ?string $category = null,
        public ?string $condition = null,
        public ?int $views = null,
        public ?string $status = null,
        public Collection|array|null $photos = null,
        public ?Carbon $created_at = null,
        public ?Carbon $updated_at = null,
    )
    {

    }

    public static function fromObject($data): Announcement
    {
        $photos = null;

        if (isset($data->photos)){
            if ($data->photos instanceof Collection) {
                $photos = $data->photos->pluck('file_id')->take(9);
            } elseif (is_array($data->photos)) {
                $photos = collect($data->photos)->map(function ($photo) {
                    return ['file_id' => $photo];
                })->pluck('file_id')->take(9);
            }
        }

        return new self(
            id: $data->id ?? null,
            chat: $data->chat ?? null,
            city: $data->city ?? null,
            type: $data->type ?? null,
            title: $data->title ?? null,
            caption: $data->caption ?? null,
            cost: $data->cost ?? null,
            category: $data->category ?? null,
            condition: $data->condition ?? null,
            views: $data->views ?? null,
            status: $data->status ?? null,
            photos: $photos,
            created_at: $data->created_at ?? null,
            updated_at: $data->updated_at ?? null,
        );
    }
    
    public function prepare() {
        $categoryArr = [
            'clothes'       => '#–æ–¥–µ–∂–¥–∞',
            'accessories'   => '#–∞–∫—Å–µ—Å—Å—É–∞—Ä—ã',
            'for_home'      => '#–¥–ª—è_–¥–æ–º–∞',
            'electronics'   => '#—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
            'sport'         => '#—Å–ø–æ—Ä—Ç',
            'furniture'     => '#–º–µ–±–µ–ª—å',
            'books'         => '#–∫–Ω–∏–≥–∏',
            'games'         => '#–∏–≥—Ä—ã',
            'auto'          => '#–∞–≤—Ç–æ_–º–æ—Ç–æ',
            'property'      => '#–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å',
            'animals'       => '#–∂–∏–≤–æ—Ç–Ω—ã–µ',
            'other'         => '#–ø—Ä–æ—á–µ–µ',
        ];

        $text = [];

        if ($this->type) {
            $text[] = $this->type === 'buy' ? '#–∫—É–ø–ª—é' : '#–ø—Ä–æ–¥–∞–º';
        }

        if ($this->title) {
            $text[] = "<b>{$this->title}</b>";
        }

        if ($this->caption) {
            $text[] = $this->caption;
        }

        if ($this->condition) {
            $text[] = "<i>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</i> " . ($this->condition === 'new' ? '–ù–æ–≤–æ–µ' : '–ë/—É');
        }

        if ($this->cost) {
            $text[] = "<i>–°—Ç–æ–∏–º–æ—Å—Ç—å:</i> {$this->cost}";
        }

        if ($this->id) {
            $text[] = "<a href='https://t.me/". Config::get('bot_username') ."?start=announcement={$this->id}'>üîó–ö–æ–Ω—Ç–∞–∫—Ç</a> (<i>–ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –Ω–∞–∂–º–∏ <b>–ù–∞—á–∞—Ç—å</b></i>)";
        }

        if ($this->category && isset($categoryArr[$this->category])) {
            $text[] = $categoryArr[$this->category];
        }

        return implode("\n\n", $text);
    }
}
